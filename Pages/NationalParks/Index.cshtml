@page
@model wtamucis3312final.Pages.NationalParks.IndexModel

@{
    ViewData["Title"] = "National Parks Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @{
                    //Alternate sort order for park name
                    var firstSort = "parkName_asc";
                    if (Model.CurrentSort == "parkName_asc")
                    {
                        firstSort = "parkName_desc";
                    }
                }
                <!-- FIXME: This will forget the current pagenum! 
                Maybe make var to keep track of current page and feed that to NationalPark[INSERT VAR HERE]-->
                <a asp-page="./Index" asp-route-CurrentSort="@firstSort">@Html.DisplayNameFor(model =>
                    model.NationalPark[0].ParkName)</a>

            </th>
            <th>
                @{
                    //Alternate sort order for park state
                    var nextSort = "parkState_asc";
                    if (Model.CurrentSort == "parkState_asc")
                    {
                        nextSort = "parkState_desc";
                    }
                }
                <!-- FIXME: This will forget the current pagenum!
                Maybe make var to keep track of current page and feed that to NationalPark[INSERT VAR HERE]-->
                <a asp-page="./Index" asp-route-CurrentSort="@nextSort">@Html.DisplayNameFor(model =>
                    model.NationalPark[0].ParkState)</a>

            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.NationalPark)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ParkName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ParkState)
                </td>
                <td>
                    <a asp-page="./Edit" asp-route-id="@item.NationalParkId">Edit</a> |
                    <a asp-page="./Details" asp-route-id="@item.NationalParkId">Details</a> |
                    <a asp-page="./Delete" asp-route-id="@item.NationalParkId">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
<hr />
@* Stops the previous button from going to non-existent pages*@
@{
    var prevDisabled = "";
    if (Model.PageNum <= 1)
    {
        prevDisabled = "disabled";
    }

    @* Stops the next button from going to non-existent pages*@
    var nextDisabled = "";
    if (Model.PageNum > (Model.MaxPageNum - 1))
    {
        nextDisabled = "disabled";
    }
}
<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        <li class="page-item @prevDisabled"><a class="page-link" asp-page="./Index"
                asp-route-PageNum="@(Model.PageNum - 1)" asp-route-CurrentSort="@Model.CurrentSort"> &lt; Previous</a>
        </li>
        <li class="page-item">
            <span class="page-link"> Page @(Model.PageNum) of @Model.MaxPageNum</span>
        </li>
        @* adding asp-route-CurrentSort="@Model.CurrentSort" solves the issue of the page forgeting the sort*@
        <li class="page-item @nextDisabled"><a class="page-link" asp-page="./Index"
                asp-route-PageNum="@(Model.PageNum + 1)" asp-route-CurrentSort="@Model.CurrentSort">Next &gt;</a>
        </li>
    </ul>
</nav>
